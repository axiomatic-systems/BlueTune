import sys
import os

from BuildUtils import *


#######################################################
# Main Build
#######################################################
Import("env")

env['NPT_EXTRA_LIBS']  = []
env['ATX_EXTRA_LIBS']  = []
env['BLT_EXTRA_LIBS']  = []
env['BLT_RELAXED_ENV'] = env

### enable logging in all builds
env.Append(CPPDEFINES = ['ATX_CONFIG_ENABLE_LOGGING', 'NPT_CONFIG_ENABLE_LOGGING'])

### build config specifics
if env['build_config'] == 'Debug':
	env.Append(CPPDEFINES = ['BLT_DEBUG'])
else:
	env.Append(CPPDEFINES = ['NDEBUG'])

### target specifics
target_config_file = env.GetBuildPath('#/Build/Targets/'+env['target']+'/Config.scons')
if os.path.exists(target_config_file):
    # Load the target-specific config file    
    execfile(target_config_file)

### extra plugins
if env.has_key('extra_plugins'): 
    env.AppendUnique(BLT_PLUGINS=Split(env['extra_plugins']))

### optional modules
OptionalModules = []

### default build env
SetDefaultEnv(env)

############################# Atomix
ATX_SOURCE_ROOT = 'Atomix/Source'
ATX_EXTRA_CPP_DEFINES = env['build_config'] == 'Debug' and ['ATX_DEBUG'] or []
MapSourceDir(ATX_SOURCE_ROOT, '#/../Atomix/Source')
CompiledModule(name                  = 'Atomix',
               module_type           = 'StaticLibrary',
               source_root           = ATX_SOURCE_ROOT,
               build_source_dirs     = ['Core'],
               build_source_files    = env['ATX_SYSTEM_SOURCES'],
               build_include_dirs    = ['Config', 'Atomix'],
               linked_modules        = env['ATX_EXTRA_LIBS'],
               extra_cpp_defines     = ATX_EXTRA_CPP_DEFINES)

############################ Zlib
ZLIB_SOURCE_ROOT = 'Neptune/ThirdParty/zlib-1.2.3'
MapSourceDir(ZLIB_SOURCE_ROOT, '#/../Neptune/ThirdParty/zlib-1.2.3')
CompiledModule(name                  = 'Zlib',
               module_type           = 'StaticLibrary',
               source_root           = ZLIB_SOURCE_ROOT,
               build_source_dirs     = ['.'])

############################ Neptune
NPT_SOURCE_ROOT = 'Neptune/Source'
NPT_EXTRA_CPP_DEFINES = env['build_config'] == 'Debug' and ['NPT_DEBUG'] or []
MapSourceDir(NPT_SOURCE_ROOT, '#/../Neptune/Source')
CompiledModule(name                  = 'Neptune',
               module_type           = 'StaticLibrary',
               source_root           = NPT_SOURCE_ROOT,
               build_source_dirs     = ['Core'],
               build_source_files    = env['NPT_SYSTEM_SOURCES'],
               included_only_modules = [NPT_SOURCE_ROOT+'/'+dir for dir in ['Config', 'Neptune']],
               linked_modules        = env['NPT_EXTRA_LIBS']+['Zlib'],
               extra_cpp_defines     = NPT_EXTRA_CPP_DEFINES)

############################ Bento4
AP4_SOURCE_ROOT = 'Bento4/Source/C++'
AP4_EXTRA_CPP_DEFINES = env.has_key('AP4_CPP_DEFINES') and env['AP4_CPP_DEFINES'] or []
if env['build_config'] == 'Debug':
    AP4_EXTRA_CPP_DEFINES.append('AP4_DEBUG')

MapSourceDir(AP4_SOURCE_ROOT, '#/../Bento4/Source/C++')
CompiledModule(name                  = 'Bento4',
               module_type           = 'StaticLibrary',
               source_root           = AP4_SOURCE_ROOT,
               build_source_dirs     = ['Core', 'MetaData', 'Crypto', 'Adapters'],
               build_source_files    = env['AP4_SYSTEM_SOURCES'],
               linked_modules        = ['Atomix'],
               included_only_modules = [AP4_SOURCE_ROOT+'/'+dir for dir in ['Config', 'Core', 'MetaData', 'Crypto', 'Adapters']],
               extra_cpp_defines     = AP4_EXTRA_CPP_DEFINES)

############################ select AAC library
if 'AacDecoder' in env['BLT_PLUGINS'] and not env.has_key('BLT_PLUGINS_AAC_LIBRARY'):  
    env['BLT_PLUGINS_AAC_LIBRARY'] = 'Melo'

############################ Melo
if 'AacDecoder' in env['BLT_PLUGINS'] and env['BLT_PLUGINS_AAC_LIBRARY'] == 'Melo':
    MLO_SOURCE_ROOT = 'Melo/Source'
    MLO_EXTRA_CPP_DEFINES = env.has_key('MLO_CPP_DEFINES') and env['MLO_CPP_DEFINES'] or []
    BLT_AAC_DECODER_PLUGIN_DIR  = 'Decoders/AAC'
    BLT_AAC_DECODER_PLUGIN_DEPS = ['Melo']
    if env['build_config'] == 'Debug':
        MLO_EXTRA_CPP_DEFINES.append(['MLO_DEBUG'])
    if env.has_key('BLT_CPU_CONFIG_NO_FLOAT'):
        MLO_EXTRA_CPP_DEFINES += ['MLO_CONFIG_FIXED']

    MapSourceDir(MLO_SOURCE_ROOT, '#/../Melo/Source')
    CompiledModule(name              = 'Melo',
                   source_root       = MLO_SOURCE_ROOT,
                   extra_cpp_defines = MLO_EXTRA_CPP_DEFINES)
    
############################ HelixAAC
if 'AacDecoder' in env['BLT_PLUGINS'] and env['BLT_PLUGINS_AAC_LIBRARY'] == 'Helix':
    BLT_AAC_DECODER_PLUGIN_DIR  = 'Decoders/HelixAAC'
    BLT_AAC_DECODER_PLUGIN_DEPS = ['HelixAAC']
    if env.has_key('BLT_PLUGINS_HELIX_AAC_ASM_DIR'):
        BLT_HELIX_AAC_ASM_DIRS = env['BLT_PLUGINS_HELIX_AAC_ASM_DIR']
    else:
        BLT_HELIX_AAC_ASM_DIRS = []
    CompiledModule(name		            = 'HelixAAC',
                   source_root          = 'ThirdParty/HelixAAC/Source',
                   build_source_dirs    = ['.', 'pub', 'real']+BLT_HELIX_AAC_ASM_DIRS,
                   build_source_pattern = ['*.c', '*.s'],
                   extra_cpp_defines    = ['USE_DEFAULT_STDLIB', 'AAC_ENABLE_SBR'],
                   environment          = env['BLT_RELAXED_ENV'])

############################# Fluo
if not env.has_key('FLO_DECODER_ENGINE'):  
    env['FLO_DECODER_ENGINE'] = 'FLO_DECODER_ENGINE_BUILTIN';
    
if (env['FLO_DECODER_ENGINE'] == 'FLO_DECODER_ENGINE_MPG123'):
    CompiledModule(name        = 'FloDecoderEngine',
                   source_root = 'ThirdParty/mpg123/mpglib')
    fluo_decoder_deps = ['FloDecoderEngine']
    fluo_decoder_lib_dirs = []
    fluo_decoder_inc_dirs = []
elif (env['FLO_DECODER_ENGINE'] == 'FLO_DECODER_ENGINE_FFMPEG'):
    fluo_decoder_deps = ['avcodec']
    fluo_decoder_lib_dirs = ['ThirdParty/ffmpeg/Targets/'+env['target']+'/lib']
    fluo_decoder_inc_dirs = ['ThirdParty/ffmpeg/Targets/'+env['target']+'/include']
elif (env['FLO_DECODER_ENGINE'] == 'FLO_DECODER_ENGINE_BUILTIN'):
    fluo_decoder_deps     = []
    fluo_decoder_lib_dirs = []
    fluo_decoder_inc_dirs = []
    
fluo_extra_cpp_defines = [('FLO_DECODER_ENGINE',env['FLO_DECODER_ENGINE'])]
if env.has_key('BLT_CPU_CONFIG_NO_FLOAT'):
    fluo_extra_cpp_defines += ['FLO_CONFIG_INTEGER_DECODE']
    
CompiledModule(name               = 'Fluo',
               source_root        = 'Source/Fluo',
               build_include_dirs = fluo_decoder_inc_dirs,
               linked_modules     = ['Atomix'] + fluo_decoder_deps,
               extra_cpp_defines  = fluo_extra_cpp_defines,
               extra_lib_dirs     = fluo_decoder_lib_dirs)

############################ Tremor
if 'VorbisDecoder' in env['BLT_PLUGINS'] and env['BLT_PLUGINS_VORBIS_LIBRARY'] == 'Tremor':
    CompiledModule(name	       = 'Tremor',
                   source_root = 'ThirdParty/Vorbis/Distributions/Tremor',
                   environment = env['BLT_RELAXED_ENV'])

############################ FLAC
if 'FlacDecoder' in env['BLT_PLUGINS']:
    FLAC_SOURCE_ROOT='ThirdParty/FLAC/Distributions/flac-1.2.0'
    CompiledModule(name	              = 'FLAC',
                   source_root        = FLAC_SOURCE_ROOT,
                   build_source_dirs  = ['src/libFLAC'],
                   build_include_dirs = [FLAC_SOURCE_ROOT+'/include', FLAC_SOURCE_ROOT+'/src/libFLAC/include'],
                   environment        = env['BLT_RELAXED_ENV'])

############################# Core
CompiledModule(name                  = 'BltCore',
               source_root           = 'Source/Core',
               included_only_modules = ['Source/Config', 'Source/BlueTune'],
               included_modules      = ['Atomix', 'Neptune'])

############################# Decoder
CompiledModule(name             = 'BltDecoder',
               source_root      = 'Source/Decoder',
               included_modules = ['Atomix', 'Neptune', 'BltCore'])

############################# Player
CompiledModule(name             = 'BltPlayer',
               source_root      = 'Source/Player',
               included_modules = ['Atomix', 'Neptune', 'BltCore', 'BltDecoder'])

############################ WmaDecoder Plugin
if 'WmaDecoder' in env['BLT_PLUGINS']:
    if os.environ.has_key('WMSDK_HOME'):
        env.AppendUnique(BLT_PLUGINS='WmaDecoder')
        WMA_SOURCE_ROOT = 'WMSDK/WMPK/WMA10Dec'
        WMA_EXTRA_CPP_DEFINES = ['BUILD_INT_FLOAT', 
                                 'ENABLE_LPC',
                                 'ENABLE_ALL_ENCOPT',
                                 'DISABLE_OPT',
                                 'BITSTREAM_CORRUPTION_ASSERTS',
                                 'WMA_DECPK_BUILD',
                                 'WMAAPI_NO_DRM',
                                 'WMAAPI_NO_DRM_STREAM',
                                 'DISABLE_UES']  
        if env['build_config'] == 'Release':
            WMA_EXTRA_CPP_DEFINES.append('NDEBUG')
        MapSourceDir(WMA_SOURCE_ROOT, '#/../WMSDK/WMPK/WMA10Dec')
        CompiledModule(name        = 'BltWmaDecoder',
                source_root        = WMA_SOURCE_ROOT,
                build_source_files = {'/Source/Plugins/Decoders/WMA':'*.c'},
                build_source_dirs  = ['audio/wmaudio/v10/asfparse_s',
                                      'audio/wmaudio/v10/common',
                                      'audio/wmaudio/v10/decoder',
                                      'audio/wmaudio/v10/fmthlpr',
                                      'audio/wmaudio/v10/include',
                                      'audio/wmaudio/v10/win32/decoder',
                                      'audio/common/primitive',
                                      'audio/common/pcmfmt',
                                      'audio/common/chanmtx'],
                build_include_dirs = [WMA_SOURCE_ROOT+'/'+x for x in 
                                      ['common/include',
                                      'common/logging',
                                       'audio/common/include']],
                included_only_modules = 'Source/Plugins/Decoders/WMA',
                linked_modules        = ['Atomix', 'BltCore'],
                environment           = env['BLT_RELAXED_ENV'],
                extra_cpp_defines     = WMA_EXTRA_CPP_DEFINES)
    elif os.environ.has_key('BLT_WMA_PLUGIN_HOME'):
        env.AppendUnique(BLT_PLUGINS='WmaDecoder')
        BLT_EXTRAS_ROOT = os.environ['BLT_WMA_PLUGIN_HOME']
        Module(name             = 'BltWmaDecoder',
               included_modules = 'Source/Plugins/Decoders/WMA',
               linked_modules   = 'BltWmaDecoderPlugin',
               lib_dirs         = [BLT_EXTRAS_ROOT+'/Targets/'+env['target']+'/lib/'+env['build_config']])
    else:
        raise Exception("location of WMA plugin support not found (set WMSDK_HOME or BLT_WMA_PLUGIN_HOME)")
    
############################# BltPluginsSupport
CompiledModule(name               = 'BltPluginsSupport',
               build_source_dirs  = [],
               build_source_files = {'/Source/Plugins/Common':'BltReplayGain.c'},
               linked_modules     = ['BltCore'])
       
############################# Plugins
PluginsSettings = {
    'FileInput'        : {'flags':'BLT_CONFIG_MODULES_ENABLE_FILE_INPUT',         'src_dir':'Inputs/File'              },
    'CddaInput'        : {'flags':'BLT_CONFIG_MODULES_ENABLE_CDDA_INPUT',         'src_dir':'Inputs/CDDA'              },
    'AlsaInput'        : {'flags':'BLT_CONFIG_MODULES_ENABLE_ALSA_INPUT',         'src_dir':'Inputs/Alsa'              },
    'NetworkInput'     : {'flags':'BLT_CONFIG_MODULES_ENABLE_NETWORK_INPUT',      'src_dir':'Inputs/Network'           },
    'FileOutput'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_FILE_OUTPUT',        'src_dir':'Outputs/File'             },
    'OssOutput'        : {'flags':'BLT_CONFIG_MODULES_ENABLE_OSS_OUTPUT',         'src_dir':'Outputs/OSS'              },
    'AlsaOutput'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_ALSA_OUTPUT',        'src_dir':'Outputs/Alsa'             },
    'MacOSXOutput'     : {'flags':'BLT_CONFIG_MODULES_ENABLE_MACOSX_OUTPUT',      'src_dir':'Outputs/MacOSX'           },
    'DebugOutput'      : {'flags':'BLT_CONFIG_MODULES_ENABLE_DEBUG_OUTPUT',       'src_dir':'Outputs/Debug'            },
    'NullOutput'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_NULL_OUTPUT',        'src_dir':'Outputs/Null'             },
    'MpegAudioDecoder' : {'flags':'BLT_CONFIG_MODULES_ENABLE_MPEG_AUDIO_DECODER', 'src_dir':'Decoders/MpegAudio'       },
    'FlacDecoder'      : {'flags':'BLT_CONFIG_MODULES_ENABLE_FLAC_DECODER',       'src_dir':'Decoders/FLAC'            },
    'AlacDecoder'      : {'flags':'BLT_CONFIG_MODULES_ENABLE_ALAC_DECODER',       'src_dir':'Decoders/ALAC'            },
    'VorbisDecoder'    : {'flags':'BLT_CONFIG_MODULES_ENABLE_VORBIS_DECODER',     'src_dir':'Decoders/Vorbis'          },
    'AacDecoder'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_AAC_DECODER',        'src_dir':BLT_AAC_DECODER_PLUGIN_DIR },
    'WmaDecoder'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_WMA_DECODER',        'src_dir':'Decoders/WMA'             },
    'WaveParser'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_WAVE_PARSER',        'src_dir':'Parsers/Wave'             },
    'AiffParser'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_AIFF_PARSER',        'src_dir':'Parsers/Aiff'             },
    'TagParser'        : {'flags':'BLT_CONFIG_MODULES_ENABLE_TAG_PARSER',         'src_dir':'Parsers/Tags'             },
    'Mp4Parser'        : {'flags':'BLT_CONFIG_MODULES_ENABLE_MP4_PARSER',         'src_dir':'Parsers/Mp4'              },
    'AdtsParser'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_ADTS_PARSER',        'src_dir':'Parsers/Adts'             },
    'WaveFormatter'    : {'flags':'BLT_CONFIG_MODULES_ENABLE_WAVE_FORMATTER',     'src_dir':'Formatters/Wave'          },
    'GainControlFilter': {'flags':'BLT_CONFIG_MODULES_ENABLE_GAIN_CONTROL_FILTER','src_dir':'Filters/GainControl'      },
    'PcmAdapter'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_PCM_ADAPTER',        'src_dir':'Adapters/PCM'             },
    'SilenceRemover'   : {'flags':'BLT_CONFIG_MODULES_ENABLE_SILENCE_REMOVER',    'src_dir':'General/SilenceRemover'   },
    'StreamPacketizer' : {'flags':'BLT_CONFIG_MODULES_ENABLE_STREAM_PACKETIZER',  'src_dir':'General/StreamPacketizer' },
    'PacketStreamer'   : {'flags':'BLT_CONFIG_MODULES_ENABLE_PACKET_STREAMER',    'src_dir':'General/PacketStreamer'   }
}
PluginsExtras = {
    'Mp4Parser':        {'dep_mods':['Bento4']},   
    'MpegAudioDecoder': {'dep_mods':['Fluo']},   
    'AacDecoder':       {'dep_mods':BLT_AAC_DECODER_PLUGIN_DEPS},   
    'FlacDecoder':      {'inc_dirs':['ThirdParty/FLAC/Distributions/flac-1.2.0/include'],
                         'dep_mods':['FLAC']},
    'VorbisDecoder':    {'inc_dirs':['ThirdParty/Vorbis/Targets/'+env['target']+'/include'],
                         'lib_dirs':['ThirdParty/Vorbis/Targets/'+env['target']+'/lib'],
                         'dep_mods':['vorbisfile','vorbis','ogg']},
    'AlsaOutput':       {'dep_mods':['asound']},   
    'AlsaInput':        {'dep_mods':['asound']},
}
if 'CddaInput' in env['BLT_PLUGINS']:
    PluginsExtras['CddaInput'] = {'src_dirs':['Inputs/CDDA/'+env['BLT_PLUGINS_CDDA_DEVICE_TYPE']]}

if 'VorbisDecoder' in env['BLT_PLUGINS'] and env.has_key('BLT_PLUGINS_VORBIS_LIBRARY'):
    if env['BLT_PLUGINS_VORBIS_LIBRARY'] == 'Tremor':
        PluginsExtras['VorbisDecoder']['dep_mods'] = ['Tremor']
        PluginsExtras['VorbisDecoder']['flags'] = ['BLT_CONFIG_VORBIS_USE_TREMOR']

if 'AacDecoder' in env['BLT_PLUGINS'] and env.has_key('BLT_PLUGINS_AAC_LIBRARY'):
    if env['BLT_PLUGINS_AAC_LIBRARY'] == 'Helix':
        PluginsExtras['AacDecoder']['dep_mods'] = ['HelixAAC']
    
for plugin in env['BLT_PLUGINS']:
    if not PluginsSettings[plugin].has_key('src_dir'): continue # skip binary only plugins
    extra_includes = []
    extra_dep_mods = []
    extra_lib_dirs = []
    extra_src_dirs = []
    extra_flags    = {}
    extra_env      = None
    if PluginsExtras.has_key(plugin):
        if PluginsExtras[plugin].has_key('inc_dirs'): extra_includes += PluginsExtras[plugin]['inc_dirs']
        if PluginsExtras[plugin].has_key('dep_mods'): extra_dep_mods += PluginsExtras[plugin]['dep_mods']
        if PluginsExtras[plugin].has_key('lib_dirs'): extra_lib_dirs = PluginsExtras[plugin]['lib_dirs']
        if PluginsExtras[plugin].has_key('src_dirs'): extra_src_dirs = PluginsExtras[plugin]['src_dirs']
        if PluginsExtras[plugin].has_key('flags'):    extra_flags    = PluginsExtras[plugin]['flags']
        if PluginsExtras[plugin].has_key('env'):      extra_env      = PluginsExtras[plugin]['env']
    CompiledModule(name               = 'Blt'+plugin,
                   source_root        = 'Source/Plugins',
                   build_source_dirs  = [PluginsSettings[plugin]['src_dir']]+extra_src_dirs,
                   build_include_dirs = ['Source/Plugins/Common', 'Source/Config']+extra_includes,
                   linked_modules     = extra_dep_mods,
                   included_modules   = ['BltCore', 'BltPluginsSupport', 'Neptune'],
                   extra_lib_dirs     = extra_lib_dirs,
                   extra_cpp_defines  = extra_flags,
                   environment        = extra_env)

plugins_cpp_defines = [PluginsSettings[p]['flags'] for p in env['BLT_PLUGINS']]
plugins_cpp_defines += [('BLT_CONFIG_MODULES_DEFAULT_OUTPUT_NAME', '"'+env['BLT_DEFAULT_OUTPUT']+'"')]

CompiledModule(name               = 'BltPlugins',
               build_source_dirs  = [],
               build_source_files = {'/Source/Plugins/Common':'BltBuiltins.c'},
               linked_modules     = ['Atomix', 'BltCore', 'BltPluginsSupport']+['Blt'+p for p in env['BLT_PLUGINS']],
               extra_cpp_defines  = plugins_cpp_defines)

############################# Sync API
LinkedModule(name             = 'BlueTune-Sync',
             included_modules = ['BltCore', 'BltDecoder', 'BltPlugins'])

############################# SDK
LinkedModule(name             = 'BlueTune',
             included_modules = ['BltCore', 'BltDecoder', 'BltPlayer', 'BltPlugins'])

############################# BtPlay
CompiledModule(name               = 'BtPlay',
               module_type        = 'Executable',
               source_root        = 'Source/Apps/BtPlay',
               included_modules   = ['BlueTune-Sync'])

############################# BtController
CompiledModule(name             = 'BtController',
               module_type      = 'Executable',
               source_root      = 'Source/Apps/BtController',
               included_modules = ['BlueTune'])

############################# PcmDiff
CompiledModule(name             = 'PcmDiff',
               module_type      = 'Executable',
               source_root      = 'Source/Apps/PcmDiff',
               included_modules = ['Neptune'])


############################# BtGtk
if env['target'] == 'x86-unknown-linux':
    try:    
        gtk_env = env.Clone()
        gtk_env.ParseConfig('pkg-config --silence-errors --cflags --libs gtk+-2.0')
        CompiledModule(name             = 'BtGtk',
                       module_type      = 'Executable',
                       source_root      = 'Source/Apps/BtGtk',
                       included_modules = ['BlueTune'],
                       environment      = gtk_env)
        OptionalModules.append('BtGtk')
    except:
        pass

################################################
# Default Build Modues
################################################
env.Default(['BtPlay', 'BtController'] + OptionalModules)

