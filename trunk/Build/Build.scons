import sys
import os
import imp
from glob import glob

#######################################################
# reusable functions and data structures
#######################################################
def LoadTool(name, env, **kw):
    config_path = GetBuildPath('#/Build/Tools/SCons')
    file, path, desc = imp.find_module(name, [config_path])
    module = imp.load_module(name, file, path, desc)
    module.generate(env, **kw)

def MergeListUnique(item_list, items):
    for item in items: 
        if not item in item_list: item_list.append(item)

def MergeItemUnique(item_list, item):
    if not item in item_list: item_list.append(item)
            
def GlobSources(drct, patterns, excluded_files=[]):
    root = GetBuildPath(GetDirPath(drct))
    files = []
    for pattern in Split(patterns):
        files += glob(root+'/'+pattern)
    return [drct+'/'+os.path.basename(x) for x in  files if os.path.basename(x) not in excluded_files]

def GetDirPath(drct):
    for key in SourceDirLookup.keys():
        if drct.startswith(key):
            return SourceDirLookup[key]+drct[len(key):]
    return '#/'+drct
    
def DeclareBuildDir(drct):
    env.BuildDir(drct, GetDirPath(drct), duplicate=0)
    
def GetIncludeDirs(modules, exclude=None):
    dirs = []
    for module in Split(modules):
        if Modules.has_key(module) and not module == exclude:
            MergeListUnique(dirs, Modules[module].GetIncludeDirs())
        else:
            MergeItemUnique(dirs, GetDirPath(module))
    return dirs
    
def GetLibraries(modules):
    libs = []
    for module in Split(modules):
        if module in libs: continue
        if Modules.has_key(module):
            dep_libs = Modules[module].GetLibraries()
            libs = [lib for lib in libs if not lib in dep_libs]+dep_libs
        else:
            libs.append(module)
    return libs

def GetLibraryDirs(modules):
    lib_dirs = []
    for module in modules:
        if Modules.has_key(module):
            MergeListUnique(lib_dirs, Modules[module].GetLibraryDirs())
    return lib_dirs

Modules = {}
class Module:
    def __init__(self, name, 
                 included_modules = [], 
                 linked_modules   = [],
                 lib_dirs         = []):
        self.name             = name
        self.included_modules = included_modules
        self.linked_modules   = linked_modules
        self.lib_dirs         = [GetDirPath(dir) for dir in lib_dirs]
        self.product          = []
        Modules[name]         = self        
        
    def GetLibraries(self):
        return self.product+GetLibraries(self.linked_modules)
        
    def GetLibraryDirs(self):
        return self.lib_dirs+GetLibraryDirs(self.linked_modules)

    def GetIncludeDirs(self):
        return GetIncludeDirs(self.included_modules, self.name)

    
class BuildModule(Module):
    def __init__(self, name, 
                 build_source_dirs     = ['.'], 
                 build_source_files    = {},
                 source_root           = 'Source',
                 build_source_pattern  = ['*.c', '*.cpp'], 
                 build_include_dirs    = [], 
                 included_modules      = [], 
                 included_only_modules = [],
                 linked_modules        = [],
                 environment           = None,
                 excluded_files        = [],
                 extra_cpp_defines     = {},
                 extra_lib_dirs        = [],
                 type                  = 'StaticLibrary') :

        # store this new object in the module dictionary
        build_source_dirs = [source_root+'/'+drct for drct in build_source_dirs]
        Module.__init__(self, 
                        name, 
                        Split(included_modules)+Split(included_only_modules)+Split(build_source_dirs), 
                        Split(linked_modules)+Split(included_modules),
                        extra_lib_dirs)
        self.build_include_dirs = build_include_dirs
        self.type               = type
        
        if environment is None:
            self.env = env.Copy()
        else:
            self.env = environment.Copy()
        self.env.Append(CPPDEFINES = extra_cpp_defines)
        
        # for each source drct to build, create a BuildDir
        # to say where we want the object files to be built,
        # and compute the list of source files to build
        sources = []
        for drct in Split(build_source_dirs):
            DeclareBuildDir(drct)
            sources += GlobSources(drct, build_source_pattern, excluded_files)
            
        # add cherry-picked files
        for drct in build_source_files.keys():
            pattern = build_source_files[drct]
            drct_path = source_root+'/'+drct
            DeclareBuildDir(drct_path)
            sources += GlobSources(drct_path, pattern)

        # calculate our build include path
        cpp_path = GetIncludeDirs(Split(self.build_include_dirs) + Split(build_source_dirs) + self.included_modules + self.linked_modules)

        # check that the source list is not empty
        if len(sources) == 0:
            raise 'Module '+name+' has no sources'
        
        # the product is a library
        self.env.AppendUnique(CPPDEFINES=self.env['BLT_GLOBAL_CPP_DEFINES'])
        self.env.AppendUnique(CPPPATH=cpp_path)
        if type == 'SharedLibrary':
            libs = GetLibraries(Split(linked_modules))
            self.product = self.env.SharedLibrary(target=name, LIBS=libs, source=sources)
        elif type == 'StaticLibrary':
            self.product = self.env.Library(target=name, source=sources)
        elif type == 'Executable':
            # libraries    
            libs = GetLibraries(linked_modules)
            lib_dirs = GetLibraryDirs(linked_modules)
            self.product = self.env.Program(target=name, source=sources, LIBS=libs, LIBPATH=lib_dirs, CPPPATH=cpp_path)
            
        self.env.Alias(name, self.product)

    
        
#######################################################
# Main Build
#######################################################
Import("env")

SourceDirLookup = {}

env['NPT_EXTRA_LIBS'] = ''
env['ATX_EXTRA_LIBS'] = ''
env['BLT_EXTRA_LIBS'] = ''

if env['build_config'] == 'Debug':
	env['BLT_GLOBAL_CPP_DEFINES'] = {'BLT_DEBUG':None, 'ATX_CONFIG_ENABLE_LOGGING':None}
else:
	env['BLT_GLOBAL_CPP_DEFINES'] = {'NDEBUG':None}

### try to read in any target specific configuration
target_config_file = env.GetBuildPath('#/Build/Targets/'+env['target']+'/Config.scons')
if os.path.exists(target_config_file):
    # Load the target-specific config file    
    execfile(target_config_file)

#######################################################
# modules
#
# Usage:
#
# The LibraryModule() function declares a code module
# The included_modules parameter is a list of all the modules and/or directories
# that will be added to the include path when building this module AND to
# the include path of any other module that depends on this one.
# The linked_modules parameter is a list of all the modules and/or directories
# that are necessary to build this module. These modules will be added to
# the include path of this module, but not to that of the modules that depend
# on this module. The modules that depend no this module, however, will 
# automatically link with the linked_modules. 
# Note that the included_modules list is automatically added to the 
# linked_modules list, so that you do not need to list in linked_modules
# the modules that are already listed in included_modules.
# If a module needs to export an include path to its dependents that
# is not a module that the dependent can link with (ex: an include dir),
# list it in the included_only_modules.
# To summarize: included_modules should list all the modules that users
# of the public interface should depend on; linked_modules should list
# all the modules not listed in included_modules that are used by the
# module's implementation only.
#######################################################

############################# Atomix
ATX_SOURCE_ROOT = 'Atomix/Source'         
SourceDirLookup[ATX_SOURCE_ROOT] = '#/../Atomix/Source'  
if env['build_config'] == 'Debug':
    ATX_EXTRA_CPP_DEFINES = {'ATX_DEBUG':None}
else:
    ATX_EXTRA_CPP_DEFINES = {}
    
BuildModule(name                  = 'Atomix',
            build_source_dirs     = ['Core'],
            build_source_files    = env['ATX_SYSTEM_SOURCES'],
            included_only_modules = [ATX_SOURCE_ROOT+'/'+dir for dir in ['Config', 'Atomix']],
            linked_modules        = env['ATX_EXTRA_LIBS'],
            source_root           = ATX_SOURCE_ROOT,
            extra_cpp_defines     = ATX_EXTRA_CPP_DEFINES)

############################ Neptune
NPT_SOURCE_ROOT = 'Neptune/Source'
SourceDirLookup[NPT_SOURCE_ROOT] = '#/../Neptune/Source'  
if env['build_config'] == 'Debug':
    NPT_EXTRA_CPP_DEFINES = {'NPT_DEBUG':None}
else:
    NPT_EXTRA_CPP_DEFINES = {}
BuildModule(name                  = 'Neptune',
            build_source_dirs     = ['Core'],
            build_source_files    = env['NPT_SYSTEM_SOURCES'],
            included_only_modules = [NPT_SOURCE_ROOT+'/'+dir for dir in ['Config', 'Neptune']],
            linked_modules        = env['NPT_EXTRA_LIBS'],
            source_root           = NPT_SOURCE_ROOT,
            extra_cpp_defines     = NPT_EXTRA_CPP_DEFINES)

############################ Bento4
AP4_SOURCE_ROOT = 'Bento4/Source/C++'
SourceDirLookup[AP4_SOURCE_ROOT] = '#/../Bento4/Source/C++'  
if env['build_config'] == 'Debug':
    AP4_EXTRA_CPP_DEFINES = {'AP4_DEBUG':None}
else:
    AP4_EXTRA_CPP_DEFINES = {}
BuildModule(name                  = 'Bento4',
            build_source_dirs     = ['Core', 'MetaData', 'Crypto'],
            build_source_files    = env['AP4_SYSTEM_SOURCES'],
            included_only_modules = [AP4_SOURCE_ROOT+'/'+dir for dir in ['Config', 'Core', 'MetaData', 'Crypto']],
            source_root           = AP4_SOURCE_ROOT,
            extra_cpp_defines     = AP4_EXTRA_CPP_DEFINES)

############################ Melo
MLO_SOURCE_ROOT = 'Melo/Source'
SourceDirLookup[MLO_SOURCE_ROOT] = '#/../Melo/Source'  
if env['build_config'] == 'Debug':
    MLO_EXTRA_CPP_DEFINES = {'MLO_DEBUG':None}
else:
    MLO_EXTRA_CPP_DEFINES = {}
BuildModule(name                  = 'Melo',
            build_source_dirs     = ['.'],
            source_root           = MLO_SOURCE_ROOT,
            extra_cpp_defines     = MLO_EXTRA_CPP_DEFINES)

############################# Fluo
if (env['FLO_DECODER_ENGINE'] == 'FLO_DECODER_ENGINE_MPG123'):
    BuildModule(name        = 'FloDecoderEngine',
                source_root = 'ThirdParty/mpg123/mpglib')
elif (env['FLO_DECODER_ENGINE'] == 'FLO_DECODER_ENGINE_FFMPEG'):
    BuildModule(name = 'FloDecoderEngine',
                source_root = 'ThirdParty/foo/bar/')
else:
    raise 'FLO_DECODER_ENGINE not set'

BuildModule(name              = 'Fluo',
            build_source_dirs = ['Fluo'],
            linked_modules    = ['Atomix', 'FloDecoderEngine'],
            extra_cpp_defines = {'FLO_DECODER_ENGINE':env['FLO_DECODER_ENGINE']})

############################# Core
BuildModule(name                  = 'BltCore',
            build_source_dirs     = ['Core'],
            included_only_modules = ['Source/Config'],
            linked_modules        = ['Atomix', 'Neptune'])

############################# Decoder
BuildModule(name               = 'BltDecoder',
            build_source_dirs  = ['Decoder'],
            linked_modules     = ['Atomix', 'Neptune', 'BltCore'])

############################# BltPluginsSupport
BuildModule(name               = 'BltPluginsSupport',
            build_source_files = {'Plugins/Common':'BltReplayGain.c'},
            linked_modules     = ['Atomix', 'Neptune', 'BltCore'])
                 
############################# Plugins
PluginsSettings = {
    'FileInput'        : {'flags':'BLT_CONFIG_MODULES_ENABLE_FILE_INPUT',         'src_dir':'Inputs/File'              },
    'CddaInput'        : {'flags':'BLT_CONFIG_MODULES_ENABLE_CDDA_INPUT',         'src_dir':'Inputs/CDDA'              },
    'AlsaInput'        : {'flags':'BLT_CONFIG_MODULES_ENABLE_ALSA_INPUT',         'src_dir':'Inputs/Alsa'              },
    'FileOutput'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_FILE_OUTPUT',        'src_dir':'Outputs/File'             },
    'OssOutput'        : {'flags':'BLT_CONFIG_MODULES_ENABLE_OSS_OUTPUT',         'src_dir':'Outputs/OSS'              },
    'AlsaOutput'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_ALSA_OUTPUT',        'src_dir':'Outputs/Alsa'             },
    'DebugOutput'      : {'flags':'BLT_CONFIG_MODULES_ENABLE_DEBUG_OUTPUT',       'src_dir':'Outputs/Debug'            },
    'NullOutput'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_NULL_OUTPUT',        'src_dir':'Outputs/Null'             },
    'MpegAudioDecoder' : {'flags':'BLT_CONFIG_MODULES_ENABLE_MPEG_AUDIO_DECODER', 'src_dir':'Decoders/MpegAudio'       },
    'FlacDecoder'      : {'flags':'BLT_CONFIG_MODULES_ENABLE_FLAC_DECODER',       'src_dir':'Decoders/FLAC'            },
    'VorbisDecoder'    : {'flags':'BLT_CONFIG_MODULES_ENABLE_VORBIS_DECODER',     'src_dir':'Decoders/Vorbis'          },
    'AacDecoder'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_AAC_DECODER',        'src_dir':'Decoders/AAC'             },
    'WaveParser'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_WAVE_PARSER',        'src_dir':'Parsers/Wave'             },
    'AiffParser'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_AIFF_PARSER',        'src_dir':'Parsers/Aiff'             },
    'TagParser'        : {'flags':'BLT_CONFIG_MODULES_ENABLE_TAG_PARSER',         'src_dir':'Parsers/Tags'             },
    'Mp4Parser'        : {'flags':'BLT_CONFIG_MODULES_ENABLE_MP4_PARSER',         'src_dir':'Parsers/Mp4'              },
    'WaveFormatter'    : {'flags':'BLT_CONFIG_MODULES_ENABLE_WAVE_FORMATTER',     'src_dir':'Formatters/Wave'          },
    'GainControlFilter': {'flags':'BLT_CONFIG_MODULES_ENABLE_GAIN_CONTROL_FILTER','src_dir':'Filters/GainControl'      },
    'PcmAdapter'       : {'flags':'BLT_CONFIG_MODULES_ENABLE_PCM_ADAPTER',        'src_dir':'Adapters/PCM'             },
    'SilenceRemover'   : {'flags':'BLT_CONFIG_MODULES_ENABLE_SILENCE_REMOVER',    'src_dir':'General/SilenceRemover'   },
    'StreamPacketizer' : {'flags':'BLT_CONFIG_MODULES_ENABLE_STREAM_PACKETIZER',  'src_dir':'General/StreamPacketizer' },
    'PacketStreamer'   : {'flags':'BLT_CONFIG_MODULES_ENABLE_PACKET_STREAMER',    'src_dir':'General/PacketStreamer'   }
}
PluginsExtras = {
    'Mp4Parser':        {'dep_mods':['Bento4']},   
    'FlacDecoder':      {'inc_dirs':['ThirdParty/FLAC/Targets/'+env['target']+'/include']},
    'VorbisDecoder':    {'inc_dirs':['ThirdParty/Vorbis/Targets/'+env['target']+'/include']},
    'MpegAudioDecoder': {'dep_mods':['Fluo']},   
    'AacDecoder':       {'dep_mods':['Melo']},   
    'FlacDecoder':      {'inc_dirs':['ThirdParty/FLAC/Targets/'+env['target']+'/include'],
                         'lib_dirs':['ThirdParty/FLAC/Targets/'+env['target']+'/lib'],
                         'dep_mods':['FLAC']},
    'VorbisDecoder':    {'inc_dirs':['ThirdParty/Vorbis/Targets/'+env['target']+'/include'],
                         'lib_dirs':['ThirdParty/Vorbis/Targets/'+env['target']+'/lib'],
                         'dep_mods':['vorbisfile','vorbis','ogg']},
    'AlsaOutput':       {'dep_mods':['asound']},   
    'AlsaInput':        {'dep_mods':['asound']},
}
if 'CddaInput' in env['BLT_PLUGINS']:
    PluginsExtras['CddaInput'] = {'src_dirs':['Plugins/Inputs/CDDA/'+env['BLT_PLUGINS_CDDA_DEVICE_TYPE']]}

for plugin in env['BLT_PLUGINS']:
    extra_includes = []
    extra_dep_mods = []
    extra_lib_dirs = []
    extra_src_dirs = []
    if PluginsExtras.has_key(plugin):
        if PluginsExtras[plugin].has_key('inc_dirs'): extra_includes += PluginsExtras[plugin]['inc_dirs']
        if PluginsExtras[plugin].has_key('dep_mods'): extra_dep_mods += PluginsExtras[plugin]['dep_mods']
        if PluginsExtras[plugin].has_key('lib_dirs'): extra_lib_dirs = PluginsExtras[plugin]['lib_dirs']
        if PluginsExtras[plugin].has_key('src_dirs'): extra_src_dirs = PluginsExtras[plugin]['src_dirs']
    BuildModule(name               = 'Blt'+plugin,
                build_source_dirs  = ['Plugins/'+PluginsSettings[plugin]['src_dir']]+extra_src_dirs,
                build_include_dirs = ['Source/Plugins/Common', 'Source/Config']+extra_includes,
                linked_modules     = extra_dep_mods,
                included_modules   = ['Atomix', 'Neptune', 'BltCore', 'BltPluginsSupport'],
                extra_lib_dirs     = extra_lib_dirs)

plugins_cpp_defines = dict([[PluginsSettings[p]['flags'], None] for p in env['BLT_PLUGINS']])
plugins_cpp_defines['BLT_CONFIG_MODULES_DEFAULT_OUTPUT_NAME'] = '\\"'+env['BLT_DEFAULT_OUTPUT']+'\\"'
BuildModule(name               = 'BltPlugins',
            build_source_files = {'Plugins/Common':'BltBuiltins.c'},
            linked_modules     = ['Atomix', 'BltCore', 'BltPluginsSupport']+['Blt'+p for p in env['BLT_PLUGINS']],
            extra_cpp_defines  = plugins_cpp_defines)

############################# BtPlay
BuildModule(name               = 'BtPlay',
            type               = 'Executable',
            build_source_dirs  = ['Apps/BtPlay'],
            build_include_dirs = ['Source/BlueTune', 'Source/Config'],
            linked_modules     = ['Atomix', 'Neptune', 'BltCore', 'BltDecoder', 'BltPlugins'])
